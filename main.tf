terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "5.99.1"
    }
  }
}

# EC2 instance to host holidays app
resource "aws_instance" "app-instance" {
  count = 1

  ami           = var.ec2_ami_id
  instance_type = "t3.xlarge"
  subnet_id     = var.subnet_id
  vpc_security_group_ids = [
    aws_security_group.app.id,
  ]
  associate_public_ip_address = true
  monitoring                  = false

  root_block_device {
    volume_size = 50
    volume_type = "gp2"
  }

  ebs_block_device {
    device_name = "/dev/sdb"
    volume_size = 100
    volume_type = "gp2"
  }
}

# Database for holidays app
resource "aws_db_instance" "database" {
  db_name                = "mydb"
  engine                 = "mysql"
  instance_class         = "db.t3.micro"
  engine_version         = "8.0"
  allocated_storage      = 10
  username               = var.db_username
  password               = var.db_password
  parameter_group_name   = "default.mysql8.0"
  skip_final_snapshot    = false
  vpc_security_group_ids = [aws_security_group.app.id]
}

# Security group
resource "aws_security_group" "app" {
  name = "holidays-app"

  ingress {
    description = "Allow access to DB"
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    self        = true
  }

  ingress {
    description = "Allow HTTPS for ALB"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# S3 bucket for reports generated by the holidays app
resource "aws_s3_bucket" "s3_bucket" {
  bucket = "holidays-webapp-bucket"
  acl    = "public-read"

  versioning {
    enabled = true
  }

  logging {
    target_bucket = aws_s3_bucket.s3_bucket.id
    target_prefix = "security-access-logs/"
  }

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }
}

# IAM user for EC2 instance to access S3 bucket
resource "aws_iam_user" "ec2_user" {
  name = "holidays-ec2"
}

resource "aws_iam_user_policy" "ec2_user" {
  name   = "s3-uploads"
  user   = aws_iam_user.ec2_user.name
  policy = data.aws_iam_policy_document.ec2_user.json
}

data "aws_iam_policy_document" "ec2_user" {
  statement {
    effect  = "Allow"
    actions = ["s3:*"]
    resources = [
      aws_s3_bucket.s3_bucket.arn
    ]
  }
}

# Load balancer
resource "aws_lb" "load-balancer" {
  name                       = "holidays-app-alb"
  load_balancer_type         = "application"
  internal                   = false
  security_groups            = [aws_security_group.app.id]
  subnets                    = var.subnet_id
  enable_deletion_protection = false
}

resource "aws_lb_target_group" "tg" {
  name        = "holidays-app-target group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"

  health_check {
    path                = "/"
    protocol            = "HTTP"
    healthy_threshold   = 3
    unhealthy_threshold = 2
    interval            = 30
    timeout             = 5
    matcher             = "200-500"
  }

  stickiness {
    type            = "lb_cookie"
    cookie_duration = 300
    enabled         = false
  }
}

resource "aws_lb_listener" "listener" {
  load_balancer_arn = aws_lb.load-balancer.arn
  port              = 443
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-TLS13-1-2-2021-06" # adjust if needed
  certificate_arn   = var.acm_cert_arn

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}

resource "aws_lb_target_group_attachment" "instances" {
  target_group_arn = aws_lb_target_group.tg.arn
  target_id        = aws_instance.app-instance.arn
}
